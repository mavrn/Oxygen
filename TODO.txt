free operators: $ ยง =>> ==>
#redo exceptions + add trycatch
#update comments
#bugtest change, macro
#rename tests

#isinstance = "is"
#binding variables
#findseq
#at assignment or atPut
#list comps ?
#spread/unpack

------
objects
class identifier =>
    setup(args) => 
        #id = arg
    <<
    func(args) =>
    <<
<<
x = identifier(args)   #funccallnode
x func(args)
func(x, args)



testcases to add
#getfield
#dicts
#kwargs
array.filter
#hashstrings
#change
#unless
#macro
#whitespace calls
#quick iter, return arrow
#repr
#all, some, none
#every
#fill
#posof -> find
#arr of
#foreach function
#select, detect
#hasKey
#hasValue
#natural language auto id

#https://www.codewars.com/kata/514a024011ea4fb54200004b/python

fn domainName url => url replace("http://", "") replace("https://", "") replace("www.", "") split: "." [0]
"http://github.com/carbonfive/raygun"  domainName 
"http://www.zombie-bites.com" domainName 
"https://www.cnet.com" domainName 
"hyphen-url.com" domainName 

['"github"', '"zombie-bites"', '"cnet"', '"hyphen-url"']


#https://www.codewars.com/kata/51b66044bce5799a7f000003

sym = ['M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I']
num = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1]

fn toRoman number =>
    let result ""
    let pointer 0
    while number =>
        div = number // num at: pointer
        number %= num at: pointer
        while div =>
            result += sym at: pointer
            div -= 1
        <<
        pointer += 1
    <<
    return result
<<

fn fromRoman roman_numeral =>
    let result 0
    roman_numeral ->
        let first_num num at(sym find: iterelem)
        let second_num num at(sym find(roman_numeral at(itercounter + 1))) if itercounter +1 != roman_numeral size else -1
        if first_num >= second_num => result += first_num
        else => result -= first_num
    <<
    return result
<<

toRoman(2541) out
fromRoman("MCCCXI") out 

["MMDXLI", "1311"]